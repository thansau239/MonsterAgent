filter {
  if [@metadata][source] == "monster-syslog" {

        mutate {
            gsub => [message, '\"', '`']
            remove_field => "host"
	    }

        csv {
            columns => ["EventID"]
            separator => "	"
            autogenerate_column_names => false
        }

        if [EventID] == "1500" {
            # process start (1500)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag",
                            "ProcessCreateTimestamp(UTC)", "TerminalSessionId", "ParentProcessId",
                            "Image","CommandLine", "Owner", "Groups", "Privileges", "Removed", "ImageSize", "ImageCreateTimestamp(UTC)",
                            "ImageWriteTimestamp(UTC)", "VerifiedResult", "Signer", "ImageFileSID","MD5", "SHA2"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }

            ruby {
                code => "
                        require 'json'
                        puts group_infos = event.get('Groups').to_s
                        group_infos.split('|').each_with_index {
                            |group_info, index|
                            puts group = group_info.to_s.split('`')

                            ge = {:name => group[0].to_s, :sid => group[1].to_s, :attributes => group[2].to_s}

                            ge.to_json
                            event.set('Group[' + index.to_s + ']', ge)
                        }

                        puts privilege_infos = event.get('Privileges').to_s
                        privilege_infos.split('|').each_with_index {
                            |priv_info, index|
                            puts priv = priv_info.to_s.split('`')

                            pe = {:name => priv[0].to_s, :attributes => priv[1].to_s}

                            pe.to_json
                            event.set('Privilege[' + index.to_s + ']', pe)
                        }
                        "
            }

        } else if [EventID] == "1501" {
            # process stop (1501)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "Flag", "ProcessId", "ProcessCreateTimestamp(UTC)",
                            "ProcessExitTimestamp(UTC)", "ExitCode"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
        } else if [EventID] == "1502" {
            # image load (2500)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)",  "ProcessId", "Flag", "ImageBase",
                            "ImageSize", "ProcessID", "ImageCheckSum", "ImageTimestamp(UTC)", "ImageDefaultBase",
                            "Image", "Removed", "ImageSize", "ImageCreateTimestamp(UTC)", "ImageWriteTimestamp(UTC)",
                            "VerifiedResult", "Signer", "ImageFileSID", "MD5", "SHA2"]
                separator => "	"
                skip_empty_columns => true
            }
        } else if [EventID] == "1503" {
            # image Unload (1503)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag", "ImageBase",
                            "ImageSize", "ProcessID", "ImageCheckSum", "ImageTimestamp(UTC)", "ImageDefaultBase",
                            "Image", "Removed"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
        } else if [EventID] == "2500" {
            # file block (2500)
            csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag", "FinalFileName(NT)",
                                "FinalFileName(DOS)", "TargetFileSize", "TargetFileCreationTimestamp(UTC)",
                                "TargetWriteTimestamp(UTC)", "TargetFileAttribute", "TargetFileVersion", "TargetFileSID",
                                "MD5", "SHA2", "WriteCounts", "WriteBytes", "Removed", "FileEventCounts"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"FileEventType" => "FileEventStatistics"}
                }
        } else if [EventID] == "2012" {
                # file create (2012)
                csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)",
                                "ProcessId", "Flag", "FileObject", "IssuingThreadId",
                                "NTCreateFileOptions", "NTCreateFileAttributes", "TargetFileName"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"FileEventType" => "CreateFile"}
                }
        } else if [EventID] == "2014" {
            # file close
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)",
                            "ProcessId", "Flag", "FileObject", "IssuingThreadId"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"FileEventType" => "CreateFile"}
            }
        } else if [EventID] == "2027" {
            # file rename path(2027)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP",
                            "CollectTimestamp(UTC)", "ProcessId", "Flag",
                            "FileObject", "IssuingThreadId", "TargetFilePath"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"FileEventType" => "FileRenamePath"}
            }
        } else if [EventID] == "2030" {
            # file create new file (2030)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP",
                            "CollectTimestamp(UTC)", "ProcessId", "Flag",
                            "FileObject", "IssuingThreadId", "TargetFileName"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"FileEventType" => "CreateNewFile"}
            }
        } else if [EventID] == "3500" or
                  [EventID] == "3501" {
            # network connect(3012) network disconnec(3013) network accept(3015)
            # file create new file (2030)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag",
                            "ConnectTimestamp(UTC)", "DestinationIp", "SourceIP", "DestinationPort", "SourcePort",
                            "ConnectionId", "SendCount", "SendBytes", "RecvCount", "RecvBytes", "DisconnectTimestamp(UTC)"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
        } else if [EventID] == "4500" {
            # registry block (4500)
            # network connect(3012) network disconnec(3013) network accept(3015)
            # file create new file (2030)
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag",
                            "TargetObject", "RegEventCounts"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"RegEventType" => "RegEventStatistics"}
            }
        } else if [EventID] == "4001" or
                  [EventID] == "4002" {
            # registry create key(4001) and open key(4002)
            csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId",
                                "RegObject", "TargetObject(base)", "TargetObject(relative)", "RegOpenKeyStatus" ]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                add_field => {"RegEventType" => "CreateKey"}
            }
        } else if [EventID] == "4003" {
            # registry create key(4001) and open key(4002)
                csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId",
                                "RegObject", "RegOpenKeyStatus", "TargetObject"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"RegEventType" => "CreateKey"}
                }
        } else if [EventID] == "4005" {
                # registry set value key(4005)
                csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId",
                                "RegObject", "RegOpenKeyStatus", "Details", "ValueDataSize",
                                "TargetObject(key)", "TargetObject(value)"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"RegEventType" => "SetValue"}
                }
        } else if [EventID] == "4006" {
                # registry del value key(4006)
                csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId",
                                "RegObject", "RegOpenKeyStatus", "TargetObject(key)", "TargetObject(value)"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"RegEventType" => "DeleteValueKey"}
                }
        } else if [EventID] == "4013" {
            # registry close key(4013)
            csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId",
                                "RegObject", "RegOpenKeyStatus", "TargetObject"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                add_field => {"RegEventType" => "CloseKey"}
            }
        } else if [EventID] == "6500" {
            # pnp event block(6500)
            csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag",
                                "SerialNumber", "ProductName", "DriveLatterr", "DeviceName"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
        } else if [EventID] == "7500" {
            # disk read(7500)
            csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag",
                                "DiskNumber", "WriteSize", "WriteOffset"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
        } else if [EventID] == "8500" {
            csv {
                    columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag", "HostName",
                                "HostMAC", "Accounts", "InstalledPrograms"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
        } else if [EventID] == "9001" or
                  [EventID] == "9002" {
            csv {
                columns => ["EventID", "EventBlockKey", "HostIP", "CollectTimestamp(UTC)", "ProcessId", "Flag", "SourceProcessId",
                            "SourceProcessSessionId", "SourceImage", "SourceProcessUser", "SourceProcessVerifyResult",
                            "SourceProcessVerifiedSigner", "SourceProcessMD5", "SourceProcessSHA2", "TargetProcessId", "TargetProcessSessionId",
                            "TargetImage", "TargetProcessUser", "TargetProcessVerifyResult", "TargetProcessVerifiedSigner",
                            "TargetProcessMD5", "TargetProcessSHA2", "GrantedAccess"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
        }

        if([CollectTimestamp(UTC)]) {
        ruby {
                code => "
                            puts rubyTime = Time.at(((event.get('CollectTimestamp(UTC)').to_i)/10000000) - 11644473600)
                            event.set('CollectTime(KST)', rubyTime.strftime('%Y-%m-%d %H:%M:%S.%3L'))
                        "
            }

            date {
                match => ["CollectTime(KST)", "%yyyy-%MM-%dd %HH:%mm:%ss.%SSS", "ISO8601"]
            }
        }

        if([ProcessCreateTimestamp(UTC)]) {
            ruby {
                code => "
                        puts rubyTime = Time.at(((event.get('ProcessCreateTimestamp(UTC)').to_i)/10000000) - 11644473600)
                        event.set('ProcessCreateTime(KST)', rubyTime.strftime('%Y-%m-%d %H:%M:%S.%3L'))
                        "
            }
        }

        if([ImageCreateTimestamp(UTC)]) {
            ruby {
                code => "
                        puts rubyTime = Time.at(((event.get('ImageCreateTimestamp(UTC)').to_i)/10000000) - 11644473600)
                        event.set('ImageCreateTime(KST)', rubyTime.strftime('%Y-%m-%d %H:%M:%S.%3L'))
                        "
            }
        }

        if([ImageWriteTimestamp(UTC)]) {
            ruby {
                code => "
                        puts rubyTime = Time.at(((event.get('ImageWriteTimestamp(UTC)').to_i)/10000000) - 11644473600)
                        event.set('ImageTimeWrite(KST)', rubyTime.strftime('%Y-%m-%d %H:%M:%S.%3L'))
                        "
            }
        }

        if([ConnectTimestamp(UTC)]) {
            ruby {
                code => "
                        puts rubyTime = Time.at(( (event.get('ConnectTimestamp(UTC)').to_i)/10000000) - 11644473600)
                        event.set('ConnectTime(KST)', rubyTime.strftime('%Y-%m-%d %H:%M:%S.%3L'))
                        "
            }
        }

        if([DisconnectTimestamp(UTC)]) {
            ruby {
                code => "
                        puts rubyTime = Time.at(((event.get('DisconnectTimestamp(UTC)').to_i)/10000000) - 11644473600)
                        event.set('DisConnectTime(KST)', rubyTime.strftime('%Y-%m-%d %H:%M:%S.%3L'))
                        "
            }
        }

        if([DestinationIp]) {
            geoip {
                source => "[DestinationIp]"
                target => "[DestinationGeoip]"
            }
        }
    }
}
