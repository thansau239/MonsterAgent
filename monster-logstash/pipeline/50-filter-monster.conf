filter {
  if [@metadata][source] == "monster-syslog" or
     [@metadata][source] == "monster-kafka" {

        mutate {
            gsub => [message, '\"', '`']
            remove_field => "host"
	    }

        csv {
            columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey"]
            separator => "	"
            autogenerate_column_names => false
        }

        if [EventID] == "1500" {
            # process start (1500)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag", "ParentProcessGUID",
                            "ParentProcessId", "TerminalSessionId", "Image","CommandLine",
                            "Owner", "Groups", "Privileges", "Removed", "Size", "CreateTimestamp(UTC)",
                            "ModifiedTimestamp(UTC)", "Type", "Attributes", "Version",
                            "VerifiedResult", "Signer", "FileOwner","MD5", "SHA2"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            ruby {
                code => "
                        require 'json'
                        puts group_infos = event.get('Groups').to_s
                        group_infos.split('|').each_with_index {
                            |group_info, index|
                            puts group = group_info.to_s.split('`')

                            ge = {:name => group[0].to_s, :sid => group[1].to_s, :attributes => group[2].to_s}

                            ge.to_json
                            event.set('Group[' + index.to_s + ']', ge)
                        }

                        puts privilege_infos = event.get('Privileges').to_s
                        privilege_infos.split('|').each_with_index {
                            |priv_info, index|
                            puts priv = priv_info.to_s.split('`')

                            pe = {:name => priv[0].to_s, :attributes => priv[1].to_s}

                            pe.to_json
                            event.set('Privilege[' + index.to_s + ']', pe)
                        }
                        "
            }
            mutate {
                add_field => {"EventType" => "ProcessCreate"}
            }
        } else if [EventID] == "1501" {
            # process stop (1501)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag", "ExitCode"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "ProcessStop"}
            }
        } else if [EventID] == "1502" {
            # image load (1502)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)",  "ProcessId", "Flag", "ImageBase",
                            "ImageCheckSum", "Image", "Removed", "Size",
                            "CreateTimestamp(UTC)", "ModifiedTimestamp(UTC)",
                            "VerifiedResult", "Signer", "FileOwner", "MD5", "SHA2"]
                separator => "	"
                skip_empty_columns => true
            }
            mutate {
                add_field => {"EventType" => "ImageLoad"}
            }
        } else if [EventID] == "1504" {
            # process open(1504)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag",
                            "TargetProcessGUID", "GrantAccess"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "ProcessOpen"}
            }
        } else if [EventID] == "1505" {
            # process duplicate(1505)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag",
                            "SourceProcessGUID", "TargetProcessGUID", "GrantAccess"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "ProcessDuplicate"}
            }
        } else if [EventID] == "1506" {
            # create remote thread(1506)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag",
                            "TargetProcessGUID", "TargetThreadId"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "RemoteThreadCreate"}
            }
        } else if [EventID] == "2500" {
            # file block (2500)
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag",
                                "DesiredAccess", "Attributes", "ShareAccess", "Disposition",
                                "Options", "Information", "TargetFilePath",
                                "FinalTargetFilePath(NT)", "FinalTargetFilePath(DOS)", "Removed",
                                "Size", "CreateTimestamp(UTC)", "ModifiedTimestamp(UTC)",
                                "FileType", "TargetFileAttributes", "TargetFileVersion",
                                "TargetFileOwner", "MD5", "SHA2", "WriteCount", "WriteBytes",
                                "FileIOCount"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "FileEvent"}
            }
        } else if [EventID] == "2501" {
            # file rename (2500)
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag",
                                "TargetFilePath"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "FileRenameEvent"}
            }
        } else if [EventID] == "3500" {
            # network connect(3500)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag",
                            "ClientIP", "ClientPort",
                            "ServerIP", "ServerPort", "ServerName",
                            "SendCount", "SendBytes", "RecvCount", "RecvBytes",
                            "DisconnectTimestamp(UTC)"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }

            geoip {
                source => "[ServerIP]"
                remove_field => "[geoip][ip]"
            }

            mutate {
                add_field => {"EventType" => "NetworkConnect(TCP)"}
            }
        } else if [EventID] == "3501" {
            # network accept(3501)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag",
                            "ServerIP", "ServerPort",
                            "ClientIP", "ClientPort", "ClientName",
                            "SendCount", "SendBytes", "RecvCount", "RecvBytes",
                            "DisconnectTimestamp(UTC)"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "NetworkAccept(TCP)"}
            }
        } else if [EventID] == "3502" {
            # network udp send(3502)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag",
                            "ClientIP",  "ClientPort", "ServerIP", "ServerPort",
                            "ServerName", "SendBytes", "RecvCount", "RecvBytes"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }

            mutate {
                add_field => {"EventType" => "NetworkSend(UDP)"}
            }

            geoip {
                source => "[ServerIP]"
                remove_field => "[geoip][ip]"
            }
        } else if [EventID] == "3503" {
            # network udp recv(3503)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag", "ServerIP",
                            "ServerPort", "ClientIP",  "ClientPort",
                            "ClientName", "RecvBytes"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "NetworkRecv(UDP)"}
            }
        } else if [EventID] == "4500" {
            # registry block (4500)
            csv {
                columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                            "EventTimestamp(UTC)", "ProcessId", "Flag", "DesiredAccess",
                            "GrantAccess", "Options", "TargetObject", "RegEventCounts"]
                separator => "	"
                skip_empty_columns => true
                autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "RegEvent"}
            }
        } else if [EventID] == "4103" {
            # registry set value(4103)
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag",
                                "Type", "Size", "TargetObject"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                add_field => {"EventType" => "RegSetValue"}
            }
        } else if [EventID] == "4105" {
            # registry delete value
                csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "TargetObject"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"EventType" => "RegDeleteValue"}
                }
        } else if [EventID] == "4106" {
                # registry rename key(4106)
                csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag",
                                "TargetObject"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
                }
                mutate {
                    add_field => {"EventType" => "RegRenameKey"}
                }
        } else if [EventID] == "6500" {
            # pnp event block(6500)
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "Inject",
                                "SerialNumber", "ProductName", "DriveLatter", "DeviceName"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "PNP"}
            }
        } else if [EventID] == "7500" {
            # disk read(7500)
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "DiskNumber",
                                "WriteSize", "WriteOffset"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "RawDiskAccess"}
            }
        } else if [EventID] == "8500" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "HostName",
                                "HostIP", "Adapters", "Accounts"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "HostInfo"}
            }
        } else if [EventID] == "9500" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "TargetUserSID",
                                "TargetDomainName", "TargetUserName", "TargetLogonID",
                                "Image", "SourceIP", "SourcePort", "LogonType"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "LogonSuccess"}
            }
        } else if [EventID] == "9501" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "TargetUserSID",
                                "TargetDomainName", "TargetUserName", "LogonStatus",
                                "FailureReason", "Image", "SourceIP", "SourcePort", "LogonType"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "LogonFailure"}
            }
        } else if [EventID] == "9502" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "TargetUserSID",
                                "TargetDomainName", "TargetUserName", "TargetLogonID", "LogonType"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "LogOff"}
            }
        } else if [EventID] == "9503" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "EventlogServiceShutdown"}
            }
        } else if [EventID] == "9504" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "UserName",
                                "DomainName", "LogonID", "ChannelName"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "DeleteEventlog"}
            }
        } else if [EventID] == "9505" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "UserName",
                                "SourceIP", "SessionID"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "RemoteSessionCreate"}
            }
        } else if [EventID] == "9506" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "UserName",
                                "SourceIP", "SessionID"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "RemoteSessionRemove"}
            }
        } else if [EventID] == "9507" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "DriverName",
                                "FinalStatus"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "DriverRegister"}
            }
        } else if [EventID] == "9508" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "ServiceName",
                                "ErrorCode"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "RemoteSessionRemove"}
            }
        } else if [EventID] == "9509" {
            csv {
                    columns => ["HostGUID", "ProcessGUID", "EventID", "EventBlockKey",
                                "EventTimestamp(UTC)", "ProcessId", "Flag", "ServiceName",
                                "ServiceType", "ImagePath"]
                    separator => "	"
                    skip_empty_columns => true
                    autogenerate_column_names => false
            }
            mutate {
                    add_field => {"EventType" => "RemoteSessionRemove"}
            }
        }

        if([EventTimestamp(UTC)]) {
            ruby {
                code => "
                            puts timestamp = ((event.get('EventTimestamp(UTC)').to_i)/10000000) - 11644473600
                            event.set('dumy_timestamp', timestamp)
                        "
            }

            date {
                match => ["dumy_timestamp", "%yyyy-%MM-%dd %HH:%mm:%SS.%SSS", "UNIX"]
                target => "@timestamp"
                timezone => "UTC"
            }

            date {
                match => ["dumy_timestamp", "%yyyy-%MM-%dd %HH:%mm:%SS.%SSS", "UNIX"]
                target => "@CollectTime"
                timezone => "UTC"
            }

            mutate {
                remove_field => "dumy_timestamp"
            }
        }

        if([CreateTimestamp(UTC)]) {
            ruby {
                code => "
                            puts timestamp = ((event.get('CreateTimestamp(UTC)').to_i)/10000000) - 11644473600
                            event.set('dumy_timestamp', timestamp)
                        "
            }

            date {
                match => ["dumy_timestamp", "%yyyy-%MM-%dd %HH:%mm:%SS.%SSS", "UNIX"]
                target => "@ImageCreateTime"
                timezone => "UTC"
            }

            mutate {
                remove_field => "dumy_timestamp"
            }
        }

        if([ModifiedTimestamp(UTC)]) {
            ruby {
                code => "
                            puts timestamp = ((event.get('ModifiedTimestamp(UTC)').to_i)/10000000) - 11644473600
                            event.set('dumy_timestamp', timestamp)
                        "
            }

            date {
                match => ["dumy_timestamp", "%yyyy-%MM-%dd %HH:%mm:%SS.%SSS", "UNIX"]
                target => "@ImageModifiedTime"
                timezone => "UTC"
            }

            mutate {
                remove_field => "dumy_timestamp"
            }
        }

        if([DisconnectTimestamp(UTC)]) {
            ruby {
                code => "
                            puts timestamp = ((event.get('DisconnectTimestamp(UTC)').to_i)/10000000) - 11644473600
                            event.set('dumy_timestamp', timestamp)
                        "
            }

            date {
                match => ["dumy_timestamp", "%yyyy-%MM-%dd %HH:%mm:%SS.%SSS", "UNIX"]
                target => "@DisconnectTime"
                timezone => "UTC"
            }

            mutate {
                remove_field => "dumy_timestamp"
            }
        }
    }
}
